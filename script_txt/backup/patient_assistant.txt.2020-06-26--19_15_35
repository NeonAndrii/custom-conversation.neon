Script: "Patient Assistant"

## Announce version (text only)

Name Speak : Pat : "</speak>Version 20200626 17:45 Neon Patient Assistant Application"

Variable: exitList = "exit", "cancel", "never mind"
Variable: noList
Variable: yesList
Variable: alertsPhraseList
Variable: heyPatList
Variable: askPrompt
Variable: returnLabel
Variable: askInput = ""
Variable: userName
Variable: photoTime

@StartUp

## Initialize

# exitList = "exit", "cancel", "never mind"
noList = "no", "not now", "never mind", "nope", "n" 
yesList =  "yes", "yup", "y"
alertsPhraseList =  "help", "I need help", "help me", "emergency", "this is an emergency", "i need a doctor", "i need a doctor", "i need a doctor", "i need a doctor", "i need a doctor", "i need a nurse", "i need aid", "i need a caregiver", "i need assistance", "i fell", "i can't get up", "fire"
heyPatList = "hey pat", "pat are you there", "is anybody listening", "what time is it"
askPrompt = ""
returnLabel = "" 
askInput = ""
userName = ""
photoTime = ""

## Ask to install assistant

returnLabel = InstallAssistant
askPrompt = "Hi, I'm Pat. I'm a demonstration patient assistant from Neon AI. Thank you for helping test my conversational skills."
askPrompt = "Please tell me your name, or you can say cancel to exit."
Goto : ASK

@InstallAssistant

userName = {askInput}

Name Speak : Pat : "Hi {userName}. I am glad you chose to install the Neon Patient Assistance Application."

## Offer additional information

Name Speak : Pat : "Before starting the Patient Assistant, would you like more information on the Neon conversational patient assistance application?"
voice_input{moreAppInfo}
if {moreAppInfo} IN {noList[*]}:
    Goto: BeginAssistant

Name Speak : Pat : "Hi. I'm Pat the demonstration conversational patient assistant from Neon Ai. I am an artificial intelligence personal assistant, I'm augmented with Neon Gecko open source code and CPI Corp patented technology. Neon AI makes the Patient Assistant application to enable patients to alert their caregivers to emergencies and other needs, and to get simple information. As your automated patient assistant I listen for calls for help and send alerts to the patient care administrator. For example, you can say help, or I fell. Another thing you can say is what time is it .. </speak> In the future you will be able to play your favorite music, turn the lights on or off, and even ask to send a text message .. And if you don't want to call me Pat, someday you will be able to change my name."

@BeginAssistant

Name Speak : Pat : "Your demonstration patient assistant has signed in. You can say, hey Pat, or, Pat are you there, if you want to know if I am listening."

# Wait for alert

@WaitForAlertPhrase

askPrompt = ""
returnLabel = GotPatientPhrase
### Name Speak : Pat : "PA 1 pre ask"
Goto : ASK
### Name Speak : Pat : "PA ERROR after call to subroutine ask - this should never happen"

@GotPatientPhrase
### Name Speak : Pat : "PA 2 post ask {askInput}"
## Did patient ask for "help" 
### Name Speak : Pat : "PA 3 {askInput}"
if {askInput} !IN {alertsPhraseList[*]}:
    ### Name Speak : Pat : "PA 4 not alert, listen again"
    Goto: WaitForAlertPhrase

# EMERGENCY

# Later:
# Check if camera available and take a photo if available
# Execute: Neon take a photo
# Later:
# photoTime = CURRENT_TIME()
# email alert with photo to care administrator

# Later:
# Begin recording audio
# sending alerts with recordings to caregiver administrator on a schedule (eg every 2 minutes)

Name Speak : Pat : "PA 5 got alert, about to reconvey {askInput}"
Reconvey : askInput
Name Speak : Pat : "PA 6 did reconvey"

askPrompt = "Please say just kidding if this is not an emergency"
returnLabel = ConfirmHelp
### Name Speak : Pat : "PA 7 about to ask to cancel help request"
Goto : ASK
@ConfirmHelp

Name Speak : Pat : "PA 8 check for jk"
## Did patient ask for "help" 
if {askInput} == "just kidding":
    ### Name Speak : Pat : "PA 9 jk so restarting listening"
    Goto: WaitForAlertPhrase

Name Speak : Pat : "Pat the Patient Assistant would now send an emergency alert, keep engaged with the patient, and send updated alerts to the caregiver."

Name Speak : Pat : "Pat test completed. Say start again to start again?"
voice_input{askInput}
### Name Speak : Pat : "PA 10 check for restart request"
if {askInput} == "start again":
    ### Name Speak : Pat : "PA 10 restarting"
    Goto: StartUp

Name Speak : Pat : "Pat exiting"
exit

## Play back to the patient what they said ("You said .." is that correct?)
## LATER: Light up Patient Assistant Device, and turn on patient room door sign
## Ask if assistance is NOT needed, provide cancel option
## Send alert #1-PatientAssistanceRequest to nursing/caregiving administration with stt, recording and photo
## Tell patient their caregiver has been alerted, provide cancel option
## LATER: Enable interactive administrator to respond with automated and/or custom reply, with stt .. and deactivate
# Ask for details
## Do you have a life threatening emergency?
## If yes then sound alarm and send alert #2-Emergency
## Do you have bleeding .. problems breathing .. weakness .. fever .. coughing .. pulse slow or racing .. 
## Send alert #3
## Play back to the patient what they said ("You said .." is that correct?)
## LATER: Keep talking, recoding, sending alerts
## I hope you can talk to me. What's your name? Tell me a few word about your situation
## LATER: Enable administrator to take snapshots, turn on audio, video, 

# ========== Subroutines

@ASK
# The ASK subroutine uses input parameters (variables) askPrompt and returnLabel
# The ASK subroutine uses result parameter (variables) askInput

Name Speak : Pat : "Ask 1 Starting"
if {askPrompt}:
    Name Speak : Pat : " {askPrompt} "
Name Speak : Pat : "Ask 2 Starting ask subroutine"
voice_input {askInput}
Name Speak : Pat : "Ask 3 got input"
if {askInput} IN {exitList[*]}:
    Name Speak : Pat : "Say yes to confirm exiting Pat, the Neon AI Patient Assistant"
    voice_input{askInput}
    if {askInput} IN {yesList[*]}:
        Name Speak : Pat : "Pat, the Neon AI Patient Assistant, signing off"
        exit
    else
        goto: ASK
### Name Speak : Pat : "Ask 4 not cancel command {askInput}"
if {askInput} IN {heyPatList[*]}:
    Name Speak : Pat : "Hi {userName}! I'm Pat, the Neon AI Patient Assistant demonstration. I'm listening all the time. Only recordings of calls for help or an emergency are made."
    Execute : "Neon what time is it"
    goto : ASK
### Name Speak : Pat : "Ask 5 About to return to {returnLabel}"
Goto: {returnLabel}

